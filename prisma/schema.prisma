// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  canvasUserId  String?   @unique
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quizAttempts  QuizAttempt[]
  accounts      Account[]
  sessions      Session[]

  Enrollment Enrollment[]
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  canvasCourseId String?  @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quizzes       Quiz[]
  enrollments   Enrollment[]
}

model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  progress      Int       @default(0) // Progress percentage
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model Quiz {
  id            String    @id @default(cuid())
  title         String
  description   String?
  timeLimit     Int?      // Time limit in minutes
  passingScore  Int?      // Minimum score to pass (percentage)
  canvasQuizId  String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions     Question[]
  attempts      QuizAttempt[]
}

model Question {
  id            String    @id @default(cuid())
  text          String
  type          QuestionType
  points        Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quizId        String
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options       QuestionOption[]
  answers       Answer[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

model QuestionOption {
  id            String    @id @default(cuid())
  text          String
  isCorrect     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  questionId    String
  question      Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id            String    @id @default(cuid())
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  score         Int?      // Score as percentage
  submitted     Boolean   @default(false)
  syncedToCanvas Boolean  @default(false)
  void          Boolean   @default(false)  // Indicates if the attempt was voided
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        String
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       Answer[]
}

model Answer {
  id            String    @id @default(cuid())
  text          String?
  selectedOptionId String?
  feedback      String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  questionId    String
  question      Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attemptId     String
  attempt       QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}